---
title: "Slack이 API를 디자인 하는 법"
date: 2021-09-04 21:30:00 +0900
categories: api
---

5년 이상 전에, 우리는 Slack 플랫폼을 출시하여 개발자들이 Slack에서 앱을 쉽게 구축하고 앱 디렉터리에 게시할 수 있도록 했다. 오늘날, 수백만 명의 사용자가 업무에 Slack을 사용하고 있으며, 플랫폼에서 88만 5천 명 이상의 활성 개발자가 구축한 애플리케이션은 Slack에서 협업을 더욱 개선하는 데 핵심이다.

몇 년 동안 우리가 가장 중요하게 생각하는 것은 훌륭한 개발자 경험을 위해 설계하는 것이다. 내부에서 기능 구현을 변경할 수 있지만 기존 API에 대한 동작 계약을 제거하거나 변경하는 것은 매우 어렵다. 그렇기 때문에 API 설계를 처음부터 신중하게 생각하는 것이 중요하다.

API를 잘 설계하면 개발자들이 좋아할 것이고, API를 이용하여 가장 창의적인 혁신가가 될 수 있다. 이들은 막대한 투자를 할 것이며, 때로는 API의 전도사가 될 수도 있다. 또한 플랫폼을 기반으로 개발자의 시간과 위험을 감수하는 리소스를 소중하게 생각한다. 잘못된 API 설계는 최소한의 채택으로 이어지며 심지어 좌절로 이어진다. 나쁜 API는 기업의 책임이 된다.

그렇다고 Slack이 항상 API를 잘 설계했다는 뜻은 아니다. 우리는 실수를 했고, 플랫폼이 확실히 더 친절한 개발자 경험을 제공할 수 있을 것이다. 그러나 이러한 실수를 인식하고 개선 방법을 파악함으로써, 때로는 현재로서는 동의하지 않을 과거의 선택과 일관성을 두 배로 줄이면 개발자 경험을 전체적으로 개선할 수 있다.

자신만의 API 스타일 가이드를 개발한다고 해서 형편없는 결정을 내리거나 오늘의 열정적인 선택이 내일의 후회가 되는 것을 완전히 막을 수는 없지만, 공공연하게, 정직하게, 명확하게 결정을 내리는 데 도움이 될 것이다. 이 게시물에서는 API 설계 원칙과 더불어 새로운 API를 지정, 검토 및 테스트하는 방법에 대해 설명한다. 결국 자신의 API 프로세스로 되돌릴 수 있는 몇 가지 아이디어가 있어야 합니다.

## 설계 원칙

수년간, 우리는 API 설계를 가이드하는 몇 가지 원칙을 정했다.

### 1. 한 가지 일을 잘하라.

API 설계를 시작하면 너무 많은 문제를 한꺼번에 해결하려는 유혹이 생긴다. 여러 가지 일을 하려고 하다 보면 복잡하고 이해하기 어려워진다. 특정 사용 사례를 선택하면 단일 설계에 집중하고 API를 단순하게 유지할 수 있다. 단순한 API는 이해하기 쉬울 뿐만 아니라 확장, 성능 향상 및 안전성도 향상된다. 또한 API에 새로운 기능을 추가하기는 쉽지만 제거하기는 어렵다.

Slack에서는 대부분의 API가 이러한 철학을 따르고 있다. 그러나 어떤 경우에는 기존의 복잡한 API를 보다 단순하고 집중적인 API로 분할해야 했다. 가장 인기 있는 API method 중 하나인 `rtm.start`는 시간이 지나면서 상당히 무거워졌다. 이 method는 팀, 채널 및 멤버에 대한 다양한 데이터와 함께 웹 소켓 API에 연결하기 위한 URL을 반환한다. 팀 규모가 커지면서 이 페이로드는 다루기 어렵고 커져서 개발자들이 감당하기에는 비용이 많이 들었다.

비록 소수의 개발자들이 이 method에서 반환된 데이터를 사용했지만, 대부분의 개발자들은 WebSocket에만 연결하기를 원했다. 그 결과 Slack은 오직 한 가지만 하는 새로운 API method인 `rtm.connect`를 도입했는데, 그것은 페이로드의 다른 데이터를 반환하지 않고 WebSocket API 세션 URL을 반환하는 것이다. 이 새로운 method는 애플리케이션 개발자와 Slack이 `rtm.start`의 확장 문제를 해결하는 데 도움이 되었다.

이 구체적인 이야기에서 한 가지 끄집어 낼 수 있는 것은: 의심스러울 때, **어떤 컬렉션에서든 제한된 수의 객체를 적용하거나 페이지를 넘기는 것이다**. 정상적이고 합리적인 상한을 정의하는 것은 시기상조적인 최적화가 아니다. 유기적 성장이 그러한 경계선이 어디에 있는지 보여줄 때, 보다 합리적인 것으로 그것을 억제하는 것은 훨씬 더 어렵다.

### 2. 빠르게 만들고 쉽게 시작할 수 있게 하라.

개발자는 사용자의 API를 이해하고 신속하게 시작할 수 있어야 한다. 사용자의 API에 익숙하지 않은 개발자가 적절한 시간 내에 "Hello World" 연습을 완료할 수 있도록 보장한다. 이 값을 평가하는 데 사용할 수 있는 메트릭 중 하나가 "Time to First Hello World"이다. Slack에서는 엔트리 레벨 개발자가 플랫폼에 대해 알아보고 앱을 만들고 약 15분 이내에 첫 API 호출을 보낼 수 있기를 바란다. 목표 "Time to First Hello World"는 실행하는 플랫폼과 개발자 대상의 경험 수준에 따라 달라진다.

시작하기 가이드, 자습서, 샘플 코드 및 대화형 문서를 사용하면 개발자가 빠르게 시작할 수 있다. Slack에서는 시작하기 가이드와 튜토리얼 외에도 개발자가 브라우저에서 API Endpoint를 사용해 볼 수 있는 대화형 API 테스터가 포함되어 있다. 점점 늘어나는 SDK 컬렉션을 사용하여 코드에 쉽게 연결할 수 있는 여러 언어의 코드 조각으로 엮기도 시작했다.

![Slack API 문서의 샘플 코드](https://slack.engineering/wp-content/uploads/sites/7/2021/08/image2.png?resize=640,569)
Slack API 문서의 샘플 코드

빠른 시작도 좋지만, 개발자들은 "Hello World"를 넘어서고 있는가? 개발자의 경험을 측정하려면 개발자가 달성하고자 하는 다른 목표에도 관심을 기울여야 한다. Slack의 경우, 개발자가 적어도 한 명의 다른 사용자 앞에서 앱을 얻거나 명령 시 메시지를 브로드캐스트하는 것 이상의 작업을 수행할 수 있는 대화형 지점에 도달하는 것이 중요하다고 생각한다.

초기 API 문서를 설계할 때 항상 물어봐야 할 질문은 다음과 같다. 현재 구축 중인 플랫폼에는 무엇이 중요한가?

### 3. 직관적인 일관성을 위해 노력하라.

당신은 API가 직관적으로 일관성을 유지하기를 원할 것이다. 이는 엔드포인트 이름, 입력 매개 변수 및 출력 응답에 반영되어야 한다. 개발자는 문서를 읽지 않아도 API의 일부를 추측할 수 있어야 한다. 그들이 이미 알고 있는 것과 비슷하게 작동해야 한다. 일관성에는 세 가지 수준이 있다.

 * 업계 표준과의 일관성: 업계에서 허용되는 모범 사례를 최대한 준수해야 한다.
 * 제품과의 일관성: 제품에서 이러한 개념을 기반으로 필드 이름을 선택해야 한다. 약어, 두문자어 및 전문 용어는 피하라. 장황하게 말하라.
 * 다른 API 메서드와의 일관성: 다른 API 메서드에서 사용하는 이름은 서로 일치해야 한다.

API 설계에 대한 자신의 의견을 공고히 하고 적는 것이 일관성을 확보하는 가장 좋은 방법 중 하나이다. 특히 API 설계에 대한 옳고 그른 방법이 하나도 없을 때는 더욱 그렇다. 하나의 방향을 골라 붙이라. Slack에서는 API에 대한 일관된 관행과 패턴을 정의하는 포괄적인 API 설계 지침을 작성했다.

![https://slack.engineering/wp-content/uploads/sites/7/2021/08/image3.png?resize=640,550](Slack이 설계한 API 설계 지침 미리보기)
Slack이 설계한 API 설계 지침 미리보기

### 4. 의미 있는 오류 반환

API를 설계하는 또 다른 원칙은 의미 있는 오류를 반환하여 개발자가 문제를 보다 쉽게 해결할 수 있도록 하는 것이다. API 설계 중에 엔지니어는 API가 반환하는 오류에 거의 주의를 기울이지 않는다. 잘못되거나 불분명한 오류는 번거로우며 API 채택에 부정적인 영향을 미칠 수 있다. 개발자들은 꼼짝도 못하고 포기만 할 수도 있다. 좋은 오류는 이해하기 쉽고 모호하지 않으며 실행 가능하다. 그들은 개발자들이 문제를 이해하고 그것을 어떻게 해결할 수 있도록 도울 것이다. API에서 구현 세부 정보, 특히 오류가 유출되어서는 안 된다.

![https://slack.engineering/wp-content/uploads/sites/7/2021/08/image5.png?resize=768,477](의미 있는 오류 반환 예시)

오류 코드를 반환하는 것 외에도 문서나 API 응답의 다른 위치에 긴 양식 오류를 추가하는 것이 종종 유용하다. 여기에는 문제를 해결하거나 추가 정보에 연결하는 방법을 포함하여 사용자가 읽을 수 있는 오류 설명이 포함될 수 있다.

![https://slack.engineering/wp-content/uploads/sites/7/2021/08/image1.png?resize=640,171](Slack API의 긴 형식 오류 메시지)
Slack API의 긴 형식 오류 메시지

개발자를 위한 SDK 및 라이브러리도 작성하는 경우 오류 메시지 및 경고를 "삼키지" 않는 것이 중요하다. 개발자가 HTTP 헤더 및 원본 요청 본문과 같이 참혹한 디버깅 세션에서 유용할 수 있는 모든 항목에 액세스할 수 있는지 확인한다. SDK가 오류를 해석하여 훨씬 더 유용하게 사용할 수 있다면 좋겠지만, 개발자는 오류에 대한 원본 API 문서를 읽고 SDK 수준에서 오류를 정확히 파악할 수 있어야 한다. 우리는 때때로 개발자들에게서 플랫폼의 유용한 오류 메시지를 강탈하면서 스스로 죄를 지기도 한다.

### 5. 규모 및 성능 설계

설계가 잘못되면 성능이 제한될 수 있다. 따라서 API를 설계할 때 다음과 같은 몇 가지 사항을 확인해야 한다.

 * 큰 컬렉션을 페이지화한다. API는 대규모 데이터셋을 처리해야 하는 경우가 많다. API 호출 한 번으로 수천 개의 항목이 반환될 수 있다. 이로 인해 웹 애플리케이션 백엔드에 과부하가 걸릴 수 있으며 대규모 데이터셋을 처리할 수 없는 클라이언트도 느려질 수 있다. 따라서 큰 결과 세트를 호출하는 것이 중요하다.
 * 큰 컬렉션을 다른 큰 컬렉션에 중첩하지 마시오: 이 경후 페이지화는 너무 복잡하다.
 * API 속도 제한: 잘못된 동작의 개발자 또는 제어가 안되는 코드 루프 하나로 인해 응용 프로그램이 중단되는 것을 원하지 않는다. 인프라를 보호하는 동시에 애플리케이션의 안정성과 가용성을 높이려면 합리적인 속도 제한을 추가해야 한다.

Slack의 API 중 하나인 `channels.list`(현재 사용 중지됨)는 채널 목록과 각 채널의 모든 멤버 목록을 반환하는 데 사용되었으며, 기본적으로 컬렉션을 다른 채널로 중첩한다. Slack이 태어났을 때, 우리는 각 팀이 수백 명의 사용자로 제한될 것이라고 가정했다. 그러나 제품이 발전하고 성장함에 따라 그러한 가정은 더 이상 사실이 아니었다. 수만 명의 사용자들로 구성된 팀을 구성하기 시작했다. 그 시점에서, 동일한 API 호출에서 각 채널의 모든 채널과 멤버를 반환해야 하는 이 구조는 지원하기가 너무 어려워졌다. 그런 다음 이를 `conversations.list`와 `conversations.members`라는 서로 다른 두 개의 API로 나누었다. 이는 API 성능 향상뿐만 아니라 개발자 경험 향상에도 도움이 되었다.

호출이 중요할 뿐만 아니라 오류의 패턴이 동일하기 때문에 호출에 대한 주제를 다시 언급한다. 당신에게 "충분히 좋다"는 말은 아마 다른 세상 사람들에게 충분하지 않을 것이다. API의 즐거움 중 하나는 다른 개발자가 API를 어떻게 사용할지 모른다는 것이다. 그러나 특히 자신이 동시에 같은 API의 사용자인 경우 깨닫지 못할 많은 가능성을 예상하는 것은 여전히 당신에게 달려있다.

### 6. 큰 변경(Breaking Change) 피하기

제품의 새 업데이트를 출시할 때 API 변경으로 인해 클라이언트의 코드를 깨지게 하는 일은 절대 바라지 않을 것이다. 그래서, 큰 변경이 뭐냐고? 기존 앱이 변경 전처럼 작동하지 않을 수 있는 모든 변경 사항을 뜻한다.

Slack에서 우리가 따르는 철학은 어제 동작했던 것이 내일 동작해야 한다는 것입니다. 그렇긴 하지만 변화는 불가피하다. 드물고 예외적인 경우, 우리는 큰 변경을 도입하기로 결정한다. 사용자 수와 작업 공간의 영향, 개발자의 다루기 어려운 정도 등 여러 요인에 따라 개발자의 원활한 경험을 위해 얼마나 많은 공지사항을 전달하고 어느 길이로 진행할 것인지에 따라 달라진다. 동일한 개발자에게 몇 달에 한 번씩 변경 사항을 처리하도록 요청해서는 안 된다.

모든 것을 당신이 원할 때 바꿀 수는 없다. 예상치 못한 변화로 인해 뒤로 물러설 수 없는 상황에 어떻게 대응할지 (사과적인) 커뮤니케이션 계획을 세우도록 하라.

## 설계 프로세스

명확한 API 설계 가이드라인을 넘어 Slack의 모든 팀이 공용 API를 구축할 수 있는 엄격한 API 설계 프로세스도 있다. 다음은 우리가 지키는 단계이다:

### 1. API 규격 작성

팀이 해결하고자 하는 문제를 해결하고 API의 사용 사례를 정의한 후 API 스펙을 작성하는 것부터 시작한다. 개발자가 사용하게 될 API의 다양한 측면에 대해 설명한다. 여기에는 **메서드 이름, 용도, 예제 요청, 응답 및 가능한 오류**와 같은 정보가 포함될 수 있다. 스펙은 API 디자인을 통해 충분히 생각할 수 있는 기회를 준다. 또한 모든 사람이 우리의 목표가 무엇인지, 그리고 우리의 자원이 어떻게 노출되는지에 대해 일치하도록 하는 중심 초안 역할을 한다.

그런 성향이 강한 팀에 있다면, OpenAPI 또는 AsyncAPI와 같은 공개 형식으로 JSON 스키마 및/또는 사양을 작성하면 구현 전에 API 프로토타입을 작성하는 데 도움이 될 수도 있다. 개발자를 위해 스키마를 게시하는 것은 자체 툴링을 시작하는 데 도움이 될 수 있지만, 사양을 최신 상태로 유지하기 위한 노력은 쉽지 않다. 우리가 스스로를 개선할 수 있는 또 다른 영역이다.

![https://slack.engineering/wp-content/uploads/sites/7/2021/08/image4.png?resize=640,719](API 사양 예시)
API 사양 예시

### 2. 내부 API 검토

코드를 작성하기 전에 설계상의 문제를 파악하는 것이 훨씬 효율적이다. Slack에서는 API 규격을 작성한 후 엔지니어가 #api-decisions라는 내부 Slack 채널에 공유한다. 이는 API를 구축한 엔지니어가 개발자 관계, 엔지니어링, 제품 관리, 개발자 지원, 파트너 엔지니어링, 보안 등으로 구성된 여러 직능 그룹에서 제안서를 다양한 시각으로 볼 수 있는 기회이다. 변경 사항에 대해 더 자세히 논의해야 하는 경우 정기적으로 예약된 API 업무 시간 내에 검토한다. 이 모임에서 그룹에서는 "변경 사항이 기존의 다른 API와 일치하는가?" 및 "API 설계 지침과 일치하는가?"와 같은 주제를 논의한다. 또한 이 그룹은 변경사항에 대한 이름 지정, 사용성, 보안 및 성능 고려사항에 대해 자세히 설명한다.

### 3. 초기 파트너 의견

내부 이해관계자와 함께 API를 구현하기에 이상적인 개발자인 파트너에게 API 규격 초안도 제공한다. 이들의 피드백은 API가 해결해야 할 문제를 해결하고 개선이 필요한 API의 측면을 이해하는 데 있어 매우 중요하다. 코드를 작성하기 전에 이러한 피드백을 구함으로써 API 설계를 빠르게 반복하고 훨씬 더 나은 API를 구축할 수 있다.

### 4. 베타 테스트

새로운 API를 널리 사용할 수 있도록 하기 전에 선별된 파트너에게 조기 액세스를 제공한다. 이러한 파트너는 API를 제품에 통합하고 API에 대한 자세한 피드백을 제공한다. 이를 통해 API 설계를 더욱 개선하고 공개 릴리스 전에 식별된 문제를 수정할 수 있는 추가 기회를 얻을 수 있다.

## 유연성 유지

API 설계 지침을 직접 설정하고 API에 대한 검토 프로세스를 구축하는 데 문제가 있었다면, 이제 팀에서도 지침을 어느 정도 내재화했을 가능성이 높다.

머지않아 예상했던 시나리오와 일치하지 않는 사례가 발생할 것이다. 때로는 엔지니어링 조직에 서비스를 제공하거나 여전히 실망스러운 일관성을 추구하면서 자신의 좋은 조언에 어긋나는 타협을 하게 될 것이다. 그러나 때로는 완전히 새로운 종류의 API가 제공되며, 가이드라인의 정신에서 영감을 받아 여러 직종의 파트너를 차단 해제할 수 있다. 법조서는 나중에 언제든지 쓸 수 있습니다.

## 마무리

직관적이고 일관되며 사용하기 쉬운 API를 설계하는 것은 어렵다. 이 게시물에서는 Slack에서 따르는 API 디자인 원칙과 디자인 프로세스에 대해 다루었다. API를 구축할 때 몇 가지 핵심 사항은 다음과 같다. 먼저 API 디자인에 대해 생각하는 데 시간을 할애하고, 의도적으로 디자인을 선택하고, 여러 이해 관계자로부터 피드백을 수집한다.

우리는 이제 막 시작했으며 다음에 무엇을 할 수 있을지 기대된다! 플랫폼에서 작업하고 개발자가 좋아하는 API를 구축하는 것을 좋아하신다면 [저희와 함께 하세요](https://slack.com/careers)!
