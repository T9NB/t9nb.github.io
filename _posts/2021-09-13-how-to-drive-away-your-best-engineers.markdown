---
title: "최고의 엔지니어를 쫓아내는 방법"
date: 2021-09-13 09:00:00 +0900
categories: culture
---

## 소프트웨어 업계에서 재직 기간이 사상 최저 수준이다.

이 글은 엔지니어의 재직 기간을 단축할 수 있는 방법들을 이야기한다.

## 서론

내가 수년간 해온 퇴사 인터뷰를 바탕으로 정리한 엔지니어들이 직장을 떠나는 이유에 대한 이유와 가능한 해결책 목록이다. 아래의 예 중 한가지가 상황을 뒤집어버린 것은 아니지만, 시간이 흐르면서 사람들이 희망을 보지 못하고 떠나게 만드는 것들이다.

## 소프트웨어를 구축할 수 없는 관리자 고용

무엇이 기술자들을 슬프게 하는가? 그들의 상사(엔지니어링 매니저, 이사, 부사장)가 그들이 매일 직면하는 것이 무엇인지도 모르고, 그것이 기능인지 아니면 처음부터 무언가를 설계하는 것인지도 모르는 것이다.

### 고칠 수 있다.

엔지니어링 관리자, 이사 또는 부사장에게 분기별 1주일 정도의 시간을 할애하여 기능을 구축 및 제공하도록 한다. 텍스트 행 변경과 같은 단순한 기능이 아니라 백로그의 고객 기능으로 하자. 규모는 약 3일 정도여야 하며, 관리자는 팀이 협업 관점에서 작업하는 것과 동일한 방식으로 작업해야 한다.

## 너무 많은 관리자를 고용하고 계층을 도입한다

관리 계층이 너무 많으면 의사 결정이 위로 이동한다. 무언가를 바꾸려면 회의가 필요할 것이다. 토론이 많을수록 팀 차원의 방향성이 떨어진다. 상급 매니저가 어떤 일을 하기를 원할 때, 그들은 다음 매니저와 의사소통이 잘 안 될 수 있고, 결국 팀은 그것을 놓친다. 의사소통이 원활하지 않아 팀들은 자신들이 무엇을 해야 하는지 궁금해하게 된다.

### 고칠 수 있다.

조직을 평평하게 만들고 가능한 한 많은 관리 계층을 제거하자.

## 가능한 한 많은 회의를 한다

사람들이 무엇을 해야 하는지 명확하지 않다고 가정하자. 사람들이 소프트웨어가 어떻게 만들어지는지 잘 모를 경우, 팀 간에 의존도가 많을 경우, 회의를 하고, 갠트 차트를 만들고, 사람들을 그 시간대로 잡고, 갠트 차트를 검토하기 위해 가능한 한 많은 회의를 한다. 미해결 질문이 있는 경우 해당 질문에 대한 답변을 얻기 위한 다른 미팅이 있는지 확인하자.

### 고칠 수 있다.

팀 간의 협업을 최소화하되 팀 내에서 높은 수준의 협업을 할 수 있도록 조직을 설계하라.

## 소프트웨어를 정의하는 프로세스를 어렵게 만든다

만약 엔지니어가 무엇이 구축되어야 하는지 알아내고, 그 기능을 구축하여 스스로 그것을 하는 노력을 짊어져야 한다면, 이것은 불행으로 이어질 것이다. 소프트웨어 개발은 팀의 노력이 되어야 한다. 제품 담당자와 업무를 조정하는 데 도움이 되는 기타 중요한 기능이 없는 팀은 그룹 내에서 불만을 갖게 된다.

### 고칠 수 있다.

엔지니어의 부담을 줄이도록 접근하는 방법: 티켓을 만들 때 최소 3명이 티켓에 대해 10분 동안 이야기하여 모든 관련 세부 사항이 카드에 기재되어 있는지 확인하고 변경 사항, 테스트 방법 등을 설명해야 한다. 엔지니어, 테스터, 제품 담당자 세 명이 최고라는 것을 알게 되었다. 개발자는 기능의 행동을 요청하고 테스터는 테스트 방법에 대해 질문하는 동안 제품 담당자는 구축해야 할 사항에 대한 컨텍스트를 주도하고 제공해야 한다. 필요한 작업에 대한 합의가 없으면 엔지니어는 소프트웨어 구축을 시작하지 않는다. 정보를 찾는 것이 엔지니어에게만 맡겨져서는 안 된다.

## 소프트웨어 전달을 어렵게 만듭니다.

티켓을 처리한 후에도 요청의 개선사항이 남아있다. 개발 환경이 위험하면 로컬에서 개발할 수 없거나 개발 환경의 변경 사항을 테스트하기 어렵다. 만약 테스트가 엉성하거나, 정기적으로 아무 이유 없이 작동을 멈추면, 엔지니어에게 힘든 삶을 만들어준다.

### 고칠 수 있다.

프로덕션 레벨로 가는 길이 얼마나 험한가에 따라, 그것을 고치는 몇 가지 방법이 있다.

 1. 아무것도 하지 말라. 벽에 부딪치게 놔두자. 이것은 당신의 직업에 실존적 위협이 될 수 있기 때문에 추천하지 않는다.
 2. 20%의 시간을 들여 이러한 문제를 해결하고, 무엇이 잘못되었는지 분석하고, 문제를 해결할 계획을 세우자.
 3. (특히 기존 코드를 유지하고 있는 경우) 새로운 티켓에 개선 사항을 기록하자.

## 엔지니어로 하여금 그들의 작업을 평가하게 한다.

그들이 그들의 일을 하기 한 달 전에 추측하게 하고, 그들이 제 시간에 끝내지 못할 때, 당신은 그들이 미래의 일을 예측하는데 서투른 것을 비난한다.

### 고칠 수 있다.

추정을 중지하라. 나는 내가 추정에 참여했던 모든 팀을 분석했다. 그 팀들은 99% 틀렸다. 내 경험상, 그것은 효과가 없다. 만약 당신이 날짜가 필요하다면, 나는 forecasting과 같은 좀 더 현대적인 방법을 추천하고 싶다.

## 팀을 너무 작게 만들자.

일부 회사에서는 3명의 "앱" 엔지니어로 구성된 팀을 구성해도 괜찮아 보인다. 그들은 feature를 개발하는 이 "앱" 팀의 모델을 채택했다. 모든 운영 및 QA는 팀 외부에서 수행되거나 공유된 팀의 일부이다. 누군가가 하루 쉬고 싶어하고 다른 사람이 아프다고 전화하기 전까지는 좋은 일이다. 갑자기 효과적인 팀이 되는 것이 어렵고, 한 사람에게 이만큼 충분히 오랫동안 전달해야 하는 많은 압력을 가하면, 그 사람은 무너져 나가게 될 것이다.

### 고칠 수 있다.

내 생각에, 최소 팀 규모는 6명이어야 한다.

## 다른 팀으로부터 빌리기

만약 여러분이 회사가 뭔가를 해야 할 때 다른 팀으로 옮겨가는 엔지니어라면, 그것은 사기를 떨어뜨릴 수 있고 엔지니어로서의 경력을 쌓을 시간이 거의 없을 때 누군가를 갈아넣는 확실한 방법을 제공할 수 있다.

### 고칠 수 있다.

미션으로 팀을 길게 유지되도록 하고 사람들을 이동시키지 말라.

## 에필로그

위의 내용은 엔지니어링 팀을 운영할 때 흔히 사용되는 안티 패턴이다. 해결 방법이 있다. 그 중 일부는 말하기 쉽고 실행하기도 어렵다. 왜냐하면 여러분이 시스템에 살고 있기 때문이다. 그리고 변화시키는 시스템, 특히 인간을 기반으로 하는 시스템은 복잡하다. 그래서 저는 여러분께 제가 수년 전에 영국에 있었던 상사로부터 얻은 이 흔한 속담을 남긴다. 회사를 바꿀 수 없다면 회사를 바꾸라.

---

원문: [How to drive away your best engineers.](https://padraigobrien.com/posts/2021/09/how-to-drive-away-your-best-engineers/)
